plugins {
	// Compiling
	id "java"
	id 'io.miret.etienne.sass' version '1.4.2' // SASS Compiler
	id "com.github.node-gradle.node" version "7.0.2" // Node Compiler

	// Formatting
	id 'com.diffplug.spotless' version "6.25.0"

	// Code Coverage
	id 'jacoco'

	// Testing
	id 'info.solidsoft.pitest' version '1.9.11' // Mutation Testing
	id 'com.adarshr.test-logger' version '4.0.0' // Test Logger
}

group = 'com.xenosnowfox.forgedbythefox'
version = '0.0.0'
defaultTasks "spotlessApply", "clean", "compileSass", "yarnBuild", "copyAssets", "copyFonts", "shadowJar"

repositories {
	mavenCentral()
	maven {
		url = "https://s3-us-west-2.amazonaws.com/dynamodb-local/release"
	}
}

allprojects {
	group = rootProject.group
	version = rootProject.version

	java {
		sourceCompatibility = JavaVersion.VERSION_21
		targetCompatibility = JavaVersion.VERSION_21
	}

	repositories {
		mavenCentral()
		maven {
			url = "https://s3-us-west-2.amazonaws.com/dynamodb-local/release"
		}
	}
}

subprojects {
	apply plugin: "java"
	apply plugin: "jacoco"
	apply plugin: "com.diffplug.spotless"
	apply plugin: "com.adarshr.test-logger"

	project.buildDir(new File(rootProject.projectDir, "build/modules/" + project.name))

	dependencies {

		// Jackson Data Modules
		implementation "com.fasterxml.jackson.core:jackson-databind:2.18.0"
		implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.14.1"
		implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.1"
		implementation "com.fasterxml.jackson.module:jackson-module-parameter-names:2.14.1"
		implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.18.0"

		// project lombok
		compileOnly "org.projectlombok:lombok:1.18.34"
		annotationProcessor "org.projectlombok:lombok:1.18.34"
		testCompileOnly "org.projectlombok:lombok:1.18.34"
		testAnnotationProcessor "org.projectlombok:lombok:1.18.34"

		// JUnit5 Testing Dependencies
		testImplementation "org.junit.jupiter:junit-jupiter-api:5.11.1"
		testImplementation "org.junit.jupiter:junit-jupiter-engine:5.11.1"
		testImplementation "org.junit.jupiter:junit-jupiter-params:5.11.1"
	}

	jacoco {
		toolVersion = "0.8.12"
	}

	test {
		useJUnitPlatform()
		finalizedBy jacocoTestReport // report is always generated after tests run
	}

	compileJava {
		dependsOn "spotlessApply"
	}

	spotless {
		java {
			importOrder()
			removeUnusedImports()
			palantirJavaFormat()
			formatAnnotations()
		}
	}
}

spotless {
	format("styling") {
		target("sass/**/*.css", "sass/**/*.scss", "sass/*.css", "sass/*.scss")

		// you can also set some style options
		// https://prettier.io/docs/en/configuration.html
		prettier().config(['parser': 'css', 'tabWidth': 4]).configFile('.prettierrc.json')
	}
}

sass {
	version = '1.80.4'
	directory = file ("${rootDir}/.gradle/sass")
	baseUrl = 'https://github.com/sass/dart-sass/releases/download'
}

compileSass {
	outputDir = project.file ("${projectDir}/build/modules/static-resources/styles/")
	sourceDir = project.file ("${projectDir}/sass")
	style = compressed
	noCharset ()
	noErrorCss ()
	sourceMap = none
	sourceMapUrls = relative
}

task yarnBuild(type: YarnTask) {
	dependsOn 'yarn'
	args = ['build']
}

node {
	// Whether to download and install a specific Node.js version or not
	// If false, it will use the globally installed Node.js
	// If true, it will download node using above parameters
	// Note that npm is bundled with Node.js
	download = true

	// Version of node to download and install (only used if download is true)
	// It will be unpacked in the workDir
	version = "18.17.1"

	// Base URL for fetching node distributions
	// Only used if download is true
	// Change it if you want to use a mirror
	// Or set to null if you want to add the repository on your own.
	distBaseUrl = "https://nodejs.org/dist"

	// The npm command executed by the npmInstall task
	// By default it is install but it can be changed to ci
	npmInstallCommand = "install"

	// The directory where Node.js is unpacked (when download is true)
	workDir = file("${project.projectDir}/.gradle/nodejs")

	// The directory where npm is installed (when a specific version is defined)
	npmWorkDir = file("${project.projectDir}/.gradle/npm")

	// The directory where yarn is installed (when a Yarn task is used)
	yarnWorkDir = file("${project.projectDir}/.gradle/yarn")
}

task copyAssets(type: Copy) {
	from 'assets'
	into 'build/modules/static-resources'
}
compileJava.dependsOn copyAssets

task copyFonts(type: Copy) {
	from 'font'
	into 'build/modules/static-resources/fonts'
}
compileJava.dependsOn copyFonts
